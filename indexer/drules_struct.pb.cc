// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drules_struct.proto

#include "drules_struct.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
template <typename>
PROTOBUF_CONSTEXPR DashDotProto::DashDotProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dd_)*/ {}

  , /*decltype(_impl_.offset_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DashDotProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DashDotProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DashDotProtoDefaultTypeInternal() {}
  union {
    DashDotProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DashDotProtoDefaultTypeInternal _DashDotProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PathSymProto::PathSymProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.step_)*/ 0

  , /*decltype(_impl_.offset_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PathSymProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathSymProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathSymProtoDefaultTypeInternal() {}
  union {
    PathSymProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathSymProtoDefaultTypeInternal _PathSymProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LineRuleProto::LineRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dashdot_)*/nullptr
  , /*decltype(_impl_.pathsym_)*/nullptr
  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.priority_)*/ 0

  , /*decltype(_impl_.join_)*/ 0

  , /*decltype(_impl_.cap_)*/ 0
} {}
struct LineRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineRuleProtoDefaultTypeInternal() {}
  union {
    LineRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineRuleProtoDefaultTypeInternal _LineRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LineDefProto::LineDefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dashdot_)*/nullptr
  , /*decltype(_impl_.pathsym_)*/nullptr
  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.join_)*/ 0

  , /*decltype(_impl_.cap_)*/ 0
} {}
struct LineDefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LineDefProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LineDefProtoDefaultTypeInternal() {}
  union {
    LineDefProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LineDefProtoDefaultTypeInternal _LineDefProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AreaRuleProto::AreaRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.border_)*/nullptr
  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.priority_)*/ 0
} {}
struct AreaRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreaRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreaRuleProtoDefaultTypeInternal() {}
  union {
    AreaRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreaRuleProtoDefaultTypeInternal _AreaRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SymbolRuleProto::SymbolRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.apply_for_type_)*/ 0

  , /*decltype(_impl_.priority_)*/ 0

  , /*decltype(_impl_.min_distance_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SymbolRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SymbolRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SymbolRuleProtoDefaultTypeInternal() {}
  union {
    SymbolRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SymbolRuleProtoDefaultTypeInternal _SymbolRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CaptionDefProto::CaptionDefProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.stroke_color_)*/ 0u

  , /*decltype(_impl_.offset_x_)*/ 0

  , /*decltype(_impl_.offset_y_)*/ 0

  , /*decltype(_impl_.is_optional_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptionDefProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptionDefProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptionDefProtoDefaultTypeInternal() {}
  union {
    CaptionDefProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptionDefProtoDefaultTypeInternal _CaptionDefProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CaptionRuleProto::CaptionRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primary_)*/nullptr
  , /*decltype(_impl_.secondary_)*/nullptr
  , /*decltype(_impl_.priority_)*/ 0
} {}
struct CaptionRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptionRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptionRuleProtoDefaultTypeInternal() {}
  union {
    CaptionRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptionRuleProtoDefaultTypeInternal _CaptionRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CircleRuleProto::CircleRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.border_)*/nullptr
  , /*decltype(_impl_.radius_)*/ 0

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.priority_)*/ 0
} {}
struct CircleRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CircleRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CircleRuleProtoDefaultTypeInternal() {}
  union {
    CircleRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CircleRuleProtoDefaultTypeInternal _CircleRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PathTextRuleProto::PathTextRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.primary_)*/nullptr
  , /*decltype(_impl_.secondary_)*/nullptr
  , /*decltype(_impl_.priority_)*/ 0
} {}
struct PathTextRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathTextRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathTextRuleProtoDefaultTypeInternal() {}
  union {
    PathTextRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathTextRuleProtoDefaultTypeInternal _PathTextRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ShieldRuleProto::ShieldRuleProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.stroke_color_)*/ 0u

  , /*decltype(_impl_.priority_)*/ 0

  , /*decltype(_impl_.min_distance_)*/ 0

  , /*decltype(_impl_.text_color_)*/ 0u

  , /*decltype(_impl_.text_stroke_color_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShieldRuleProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShieldRuleProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShieldRuleProtoDefaultTypeInternal() {}
  union {
    ShieldRuleProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShieldRuleProtoDefaultTypeInternal _ShieldRuleProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DrawElementProto::DrawElementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.apply_if_)*/{}
  , /*decltype(_impl_.area_)*/nullptr
  , /*decltype(_impl_.symbol_)*/nullptr
  , /*decltype(_impl_.caption_)*/nullptr
  , /*decltype(_impl_.circle_)*/nullptr
  , /*decltype(_impl_.path_text_)*/nullptr
  , /*decltype(_impl_.shield_)*/nullptr
  , /*decltype(_impl_.scale_)*/ 0
} {}
struct DrawElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DrawElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DrawElementProtoDefaultTypeInternal() {}
  union {
    DrawElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DrawElementProtoDefaultTypeInternal _DrawElementProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClassifElementProto::ClassifElementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.element_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClassifElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifElementProtoDefaultTypeInternal() {}
  union {
    ClassifElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifElementProtoDefaultTypeInternal _ClassifElementProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ColorElementProto::ColorElementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.color_)*/ 0u

  , /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorElementProtoDefaultTypeInternal() {}
  union {
    ColorElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorElementProtoDefaultTypeInternal _ColorElementProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ColorsElementProto::ColorsElementProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorsElementProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorsElementProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorsElementProtoDefaultTypeInternal() {}
  union {
    ColorsElementProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorsElementProtoDefaultTypeInternal _ColorsElementProto_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ContainerProto::ContainerProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cont_)*/{}
  , /*decltype(_impl_.colors_)*/nullptr} {}
struct ContainerProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContainerProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContainerProtoDefaultTypeInternal() {}
  union {
    ContainerProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContainerProtoDefaultTypeInternal _ContainerProto_default_instance_;
bool LineJoin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    LineJoin_strings[3] = {};

static const char LineJoin_names[] = {
    "BEVELJOIN"
    "NOJOIN"
    "ROUNDJOIN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LineJoin_entries[] =
    {
        {{&LineJoin_names[0], 9}, 1},
        {{&LineJoin_names[9], 6}, 2},
        {{&LineJoin_names[15], 9}, 0},
};

static const int LineJoin_entries_by_number[] = {
    2,  // 0 -> ROUNDJOIN
    0,  // 1 -> BEVELJOIN
    1,  // 2 -> NOJOIN
};

const std::string& LineJoin_Name(LineJoin value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LineJoin_entries, LineJoin_entries_by_number,
          3, LineJoin_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LineJoin_entries, LineJoin_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : LineJoin_strings[idx].get();
}

bool LineJoin_Parse(absl::string_view name, LineJoin* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LineJoin_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LineJoin>(int_value);
  }
  return success;
}
bool LineCap_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    LineCap_strings[3] = {};

static const char LineCap_names[] = {
    "BUTTCAP"
    "ROUNDCAP"
    "SQUARECAP"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LineCap_entries[] =
    {
        {{&LineCap_names[0], 7}, 1},
        {{&LineCap_names[7], 8}, 0},
        {{&LineCap_names[15], 9}, 2},
};

static const int LineCap_entries_by_number[] = {
    1,  // 0 -> ROUNDCAP
    0,  // 1 -> BUTTCAP
    2,  // 2 -> SQUARECAP
};

const std::string& LineCap_Name(LineCap value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LineCap_entries, LineCap_entries_by_number,
          3, LineCap_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LineCap_entries, LineCap_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : LineCap_strings[idx].get();
}

bool LineCap_Parse(absl::string_view name, LineCap* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LineCap_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<LineCap>(int_value);
  }
  return success;
}
// ===================================================================

class DashDotProto::_Internal {
 public:
};

DashDotProto::DashDotProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DashDotProto)
}
DashDotProto::DashDotProto(const DashDotProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DashDotProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dd_) { from._impl_.dd_ }

    , decltype(_impl_.offset_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.offset_ = from._impl_.offset_;
  // @@protoc_insertion_point(copy_constructor:DashDotProto)
}

inline void DashDotProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.dd_) { arena }

    , decltype(_impl_.offset_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DashDotProto::~DashDotProto() {
  // @@protoc_insertion_point(destructor:DashDotProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DashDotProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dd_.~RepeatedField();
}

void DashDotProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DashDotProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DashDotProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_dd()->Clear();
  _impl_.offset_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DashDotProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double dd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dd(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 9) {
          _internal_add_dd(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DashDotProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DashDotProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double dd = 1;
  if (this->_internal_dd_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_dd(), target);
  }

  // double offset = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DashDotProto)
  return target;
}

::size_t DashDotProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DashDotProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double dd = 1;
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_dd_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // double offset = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 9;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DashDotProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DashDotProto*>(
      &from));
}

void DashDotProto::MergeFrom(const DashDotProto& from) {
  DashDotProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DashDotProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dd_.MergeFrom(from._impl_.dd_);
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DashDotProto::CopyFrom(const DashDotProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DashDotProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DashDotProto::IsInitialized() const {
  return true;
}

void DashDotProto::InternalSwap(DashDotProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dd_.InternalSwap(&other->_impl_.dd_);

  swap(_impl_.offset_, other->_impl_.offset_);
}

std::string DashDotProto::GetTypeName() const {
  return "DashDotProto";
}

// ===================================================================

class PathSymProto::_Internal {
 public:
};

PathSymProto::PathSymProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PathSymProto)
}
PathSymProto::PathSymProto(const PathSymProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PathSymProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.step_) {}

    , decltype(_impl_.offset_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.step_, &from._impl_.step_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.step_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:PathSymProto)
}

inline void PathSymProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.step_) { 0 }

    , decltype(_impl_.offset_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PathSymProto::~PathSymProto() {
  // @@protoc_insertion_point(destructor:PathSymProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathSymProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PathSymProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathSymProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathSymProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.step_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.offset_) -
      reinterpret_cast<char*>(&_impl_.step_)) + sizeof(_impl_.offset_));
  _internal_metadata_.Clear<std::string>();
}

const char* PathSymProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // double step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PathSymProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathSymProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "PathSymProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // double step = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_step = this->_internal_step();
  ::uint64_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        2, this->_internal_step(), target);
  }

  // double offset = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathSymProto)
  return target;
}

::size_t PathSymProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathSymProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // double step = 2;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_step = this->_internal_step();
  ::uint64_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    total_size += 9;
  }

  // double offset = 3;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = this->_internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    total_size += 9;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathSymProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PathSymProto*>(
      &from));
}

void PathSymProto::MergeFrom(const PathSymProto& from) {
  PathSymProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PathSymProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_step = from._internal_step();
  ::uint64_t raw_step;
  memcpy(&raw_step, &tmp_step, sizeof(tmp_step));
  if (raw_step != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_offset = from._internal_offset();
  ::uint64_t raw_offset;
  memcpy(&raw_offset, &tmp_offset, sizeof(tmp_offset));
  if (raw_offset != 0) {
    _this->_internal_set_offset(from._internal_offset());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PathSymProto::CopyFrom(const PathSymProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathSymProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathSymProto::IsInitialized() const {
  return true;
}

void PathSymProto::InternalSwap(PathSymProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.offset_)
      + sizeof(PathSymProto::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(PathSymProto, _impl_.step_)>(
          reinterpret_cast<char*>(&_impl_.step_),
          reinterpret_cast<char*>(&other->_impl_.step_));
}

std::string PathSymProto::GetTypeName() const {
  return "PathSymProto";
}

// ===================================================================

class LineRuleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LineRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_._has_bits_);
  static const ::DashDotProto& dashdot(const LineRuleProto* msg);
  static void set_has_dashdot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PathSymProto& pathsym(const LineRuleProto* msg);
  static void set_has_pathsym(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::DashDotProto&
LineRuleProto::_Internal::dashdot(const LineRuleProto* msg) {
  return *msg->_impl_.dashdot_;
}
const ::PathSymProto&
LineRuleProto::_Internal::pathsym(const LineRuleProto* msg) {
  return *msg->_impl_.pathsym_;
}
LineRuleProto::LineRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LineRuleProto)
}
LineRuleProto::LineRuleProto(const LineRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LineRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dashdot_){nullptr}
    , decltype(_impl_.pathsym_){nullptr}
    , decltype(_impl_.width_) {}

    , decltype(_impl_.color_) {}

    , decltype(_impl_.priority_) {}

    , decltype(_impl_.join_) {}

    , decltype(_impl_.cap_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dashdot_ = new ::DashDotProto(*from._impl_.dashdot_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pathsym_ = new ::PathSymProto(*from._impl_.pathsym_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cap_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  // @@protoc_insertion_point(copy_constructor:LineRuleProto)
}

inline void LineRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dashdot_){nullptr}
    , decltype(_impl_.pathsym_){nullptr}
    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.priority_) { 0 }

    , decltype(_impl_.join_) { 0 }

    , decltype(_impl_.cap_) { 0 }

  };
}

LineRuleProto::~LineRuleProto() {
  // @@protoc_insertion_point(destructor:LineRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dashdot_;
  if (this != internal_default_instance()) delete _impl_.pathsym_;
}

void LineRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dashdot_ != nullptr);
      _impl_.dashdot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pathsym_ != nullptr);
      _impl_.pathsym_->Clear();
    }
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cap_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .DashDotProto dashdot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dashdot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .PathSymProto pathsym = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathsym(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineJoin join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_join(static_cast<::LineJoin>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineCap cap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_cap(static_cast<::LineCap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LineRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LineRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_width(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DashDotProto dashdot = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dashdot(this),
        _Internal::dashdot(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_priority(), target);
  }

  // .PathSymProto pathsym = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pathsym(this),
        _Internal::pathsym(this).GetCachedSize(), target, stream);
  }

  // .LineJoin join = 6;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_join(), target);
  }

  // .LineCap cap = 7;
  if (this->_internal_cap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_cap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LineRuleProto)
  return target;
}

::size_t LineRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .DashDotProto dashdot = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dashdot_);
    }

    // .PathSymProto pathsym = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pathsym_);
    }

  }
  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  // .LineJoin join = 6;
  if (this->_internal_join() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_join());
  }

  // .LineCap cap = 7;
  if (this->_internal_cap() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LineRuleProto*>(
      &from));
}

void LineRuleProto::MergeFrom(const LineRuleProto& from) {
  LineRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:LineRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dashdot()->::DashDotProto::MergeFrom(
          from._internal_dashdot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pathsym()->::PathSymProto::MergeFrom(
          from._internal_pathsym());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_join() != 0) {
    _this->_internal_set_join(from._internal_join());
  }
  if (from._internal_cap() != 0) {
    _this->_internal_set_cap(from._internal_cap());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineRuleProto::CopyFrom(const LineRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRuleProto::IsInitialized() const {
  return true;
}

void LineRuleProto::InternalSwap(LineRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.cap_)
      + sizeof(LineRuleProto::_impl_.cap_)
      - PROTOBUF_FIELD_OFFSET(LineRuleProto, _impl_.dashdot_)>(
          reinterpret_cast<char*>(&_impl_.dashdot_),
          reinterpret_cast<char*>(&other->_impl_.dashdot_));
}

std::string LineRuleProto::GetTypeName() const {
  return "LineRuleProto";
}

// ===================================================================

class LineDefProto::_Internal {
 public:
  using HasBits = decltype(std::declval<LineDefProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_._has_bits_);
  static const ::DashDotProto& dashdot(const LineDefProto* msg);
  static void set_has_dashdot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PathSymProto& pathsym(const LineDefProto* msg);
  static void set_has_pathsym(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::DashDotProto&
LineDefProto::_Internal::dashdot(const LineDefProto* msg) {
  return *msg->_impl_.dashdot_;
}
const ::PathSymProto&
LineDefProto::_Internal::pathsym(const LineDefProto* msg) {
  return *msg->_impl_.pathsym_;
}
LineDefProto::LineDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:LineDefProto)
}
LineDefProto::LineDefProto(const LineDefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LineDefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dashdot_){nullptr}
    , decltype(_impl_.pathsym_){nullptr}
    , decltype(_impl_.width_) {}

    , decltype(_impl_.color_) {}

    , decltype(_impl_.join_) {}

    , decltype(_impl_.cap_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.dashdot_ = new ::DashDotProto(*from._impl_.dashdot_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.pathsym_ = new ::PathSymProto(*from._impl_.pathsym_);
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cap_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  // @@protoc_insertion_point(copy_constructor:LineDefProto)
}

inline void LineDefProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dashdot_){nullptr}
    , decltype(_impl_.pathsym_){nullptr}
    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.join_) { 0 }

    , decltype(_impl_.cap_) { 0 }

  };
}

LineDefProto::~LineDefProto() {
  // @@protoc_insertion_point(destructor:LineDefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LineDefProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dashdot_;
  if (this != internal_default_instance()) delete _impl_.pathsym_;
}

void LineDefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LineDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:LineDefProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dashdot_ != nullptr);
      _impl_.dashdot_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.pathsym_ != nullptr);
      _impl_.pathsym_->Clear();
    }
  }
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cap_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.cap_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LineDefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .DashDotProto dashdot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dashdot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .PathSymProto pathsym = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pathsym(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineJoin join = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_join(static_cast<::LineJoin>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineCap cap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_cap(static_cast<::LineCap>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LineDefProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LineDefProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_width(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .DashDotProto dashdot = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dashdot(this),
        _Internal::dashdot(this).GetCachedSize(), target, stream);
  }

  // .PathSymProto pathsym = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pathsym(this),
        _Internal::pathsym(this).GetCachedSize(), target, stream);
  }

  // .LineJoin join = 6;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_join(), target);
  }

  // .LineCap cap = 7;
  if (this->_internal_cap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_cap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LineDefProto)
  return target;
}

::size_t LineDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LineDefProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .DashDotProto dashdot = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dashdot_);
    }

    // .PathSymProto pathsym = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pathsym_);
    }

  }
  // double width = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 9;
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // .LineJoin join = 6;
  if (this->_internal_join() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_join());
  }

  // .LineCap cap = 7;
  if (this->_internal_cap() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineDefProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LineDefProto*>(
      &from));
}

void LineDefProto::MergeFrom(const LineDefProto& from) {
  LineDefProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:LineDefProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dashdot()->::DashDotProto::MergeFrom(
          from._internal_dashdot());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pathsym()->::PathSymProto::MergeFrom(
          from._internal_pathsym());
    }
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  ::uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_join() != 0) {
    _this->_internal_set_join(from._internal_join());
  }
  if (from._internal_cap() != 0) {
    _this->_internal_set_cap(from._internal_cap());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LineDefProto::CopyFrom(const LineDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LineDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineDefProto::IsInitialized() const {
  return true;
}

void LineDefProto::InternalSwap(LineDefProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.cap_)
      + sizeof(LineDefProto::_impl_.cap_)
      - PROTOBUF_FIELD_OFFSET(LineDefProto, _impl_.dashdot_)>(
          reinterpret_cast<char*>(&_impl_.dashdot_),
          reinterpret_cast<char*>(&other->_impl_.dashdot_));
}

std::string LineDefProto::GetTypeName() const {
  return "LineDefProto";
}

// ===================================================================

class AreaRuleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AreaRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_._has_bits_);
  static const ::LineDefProto& border(const AreaRuleProto* msg);
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::LineDefProto&
AreaRuleProto::_Internal::border(const AreaRuleProto* msg) {
  return *msg->_impl_.border_;
}
AreaRuleProto::AreaRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:AreaRuleProto)
}
AreaRuleProto::AreaRuleProto(const AreaRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AreaRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.border_){nullptr}
    , decltype(_impl_.color_) {}

    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.border_ = new ::LineDefProto(*from._impl_.border_);
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:AreaRuleProto)
}

inline void AreaRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.border_){nullptr}
    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.priority_) { 0 }

  };
}

AreaRuleProto::~AreaRuleProto() {
  // @@protoc_insertion_point(destructor:AreaRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AreaRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.border_;
}

void AreaRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AreaRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:AreaRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.border_ != nullptr);
    _impl_.border_->Clear();
  }
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AreaRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineDefProto border = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AreaRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AreaRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_color(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .LineDefProto border = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::border(this),
        _Internal::border(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AreaRuleProto)
  return target;
}

::size_t AreaRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AreaRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LineDefProto border = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.border_);
  }

  // uint32 color = 1;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AreaRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AreaRuleProto*>(
      &from));
}

void AreaRuleProto::MergeFrom(const AreaRuleProto& from) {
  AreaRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:AreaRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_border()->::LineDefProto::MergeFrom(
        from._internal_border());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AreaRuleProto::CopyFrom(const AreaRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AreaRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaRuleProto::IsInitialized() const {
  return true;
}

void AreaRuleProto::InternalSwap(AreaRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.priority_)
      + sizeof(AreaRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(AreaRuleProto, _impl_.border_)>(
          reinterpret_cast<char*>(&_impl_.border_),
          reinterpret_cast<char*>(&other->_impl_.border_));
}

std::string AreaRuleProto::GetTypeName() const {
  return "AreaRuleProto";
}

// ===================================================================

class SymbolRuleProto::_Internal {
 public:
};

SymbolRuleProto::SymbolRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:SymbolRuleProto)
}
SymbolRuleProto::SymbolRuleProto(const SymbolRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SymbolRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.apply_for_type_) {}

    , decltype(_impl_.priority_) {}

    , decltype(_impl_.min_distance_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.apply_for_type_, &from._impl_.apply_for_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.min_distance_) -
    reinterpret_cast<char*>(&_impl_.apply_for_type_)) + sizeof(_impl_.min_distance_));
  // @@protoc_insertion_point(copy_constructor:SymbolRuleProto)
}

inline void SymbolRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.apply_for_type_) { 0 }

    , decltype(_impl_.priority_) { 0 }

    , decltype(_impl_.min_distance_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SymbolRuleProto::~SymbolRuleProto() {
  // @@protoc_insertion_point(destructor:SymbolRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SymbolRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SymbolRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SymbolRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SymbolRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.apply_for_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.min_distance_) -
      reinterpret_cast<char*>(&_impl_.apply_for_type_)) + sizeof(_impl_.min_distance_));
  _internal_metadata_.Clear<std::string>();
}

const char* SymbolRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 apply_for_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.apply_for_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 min_distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SymbolRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SymbolRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "SymbolRuleProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 apply_for_type = 2;
  if (this->_internal_apply_for_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_apply_for_type(), target);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_priority(), target);
  }

  // int32 min_distance = 4;
  if (this->_internal_min_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_min_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SymbolRuleProto)
  return target;
}

::size_t SymbolRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SymbolRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // int32 apply_for_type = 2;
  if (this->_internal_apply_for_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_apply_for_type());
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  // int32 min_distance = 4;
  if (this->_internal_min_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SymbolRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SymbolRuleProto*>(
      &from));
}

void SymbolRuleProto::MergeFrom(const SymbolRuleProto& from) {
  SymbolRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:SymbolRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_apply_for_type() != 0) {
    _this->_internal_set_apply_for_type(from._internal_apply_for_type());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_min_distance() != 0) {
    _this->_internal_set_min_distance(from._internal_min_distance());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SymbolRuleProto::CopyFrom(const SymbolRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymbolRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRuleProto::IsInitialized() const {
  return true;
}

void SymbolRuleProto::InternalSwap(SymbolRuleProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.min_distance_)
      + sizeof(SymbolRuleProto::_impl_.min_distance_)
      - PROTOBUF_FIELD_OFFSET(SymbolRuleProto, _impl_.apply_for_type_)>(
          reinterpret_cast<char*>(&_impl_.apply_for_type_),
          reinterpret_cast<char*>(&other->_impl_.apply_for_type_));
}

std::string SymbolRuleProto::GetTypeName() const {
  return "SymbolRuleProto";
}

// ===================================================================

class CaptionDefProto::_Internal {
 public:
};

CaptionDefProto::CaptionDefProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CaptionDefProto)
}
CaptionDefProto::CaptionDefProto(const CaptionDefProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CaptionDefProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.color_) {}

    , decltype(_impl_.stroke_color_) {}

    , decltype(_impl_.offset_x_) {}

    , decltype(_impl_.offset_y_) {}

    , decltype(_impl_.is_optional_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_optional_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_optional_));
  // @@protoc_insertion_point(copy_constructor:CaptionDefProto)
}

inline void CaptionDefProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.text_) {}

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.stroke_color_) { 0u }

    , decltype(_impl_.offset_x_) { 0 }

    , decltype(_impl_.offset_y_) { 0 }

    , decltype(_impl_.is_optional_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.text_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaptionDefProto::~CaptionDefProto() {
  // @@protoc_insertion_point(destructor:CaptionDefProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptionDefProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void CaptionDefProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptionDefProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionDefProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_optional_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_optional_));
  _internal_metadata_.Clear<std::string>();
}

const char* CaptionDefProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 stroke_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.stroke_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 offset_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.offset_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 offset_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.offset_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string text = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_optional = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.is_optional_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CaptionDefProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CaptionDefProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  // uint32 stroke_color = 3;
  if (this->_internal_stroke_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_stroke_color(), target);
  }

  // int32 offset_x = 4;
  if (this->_internal_offset_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_offset_x(), target);
  }

  // int32 offset_y = 5;
  if (this->_internal_offset_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_offset_y(), target);
  }

  // string text = 6;
  if (!this->_internal_text().empty()) {
    const std::string& _s = this->_internal_text();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "CaptionDefProto.text");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // bool is_optional = 7;
  if (this->_internal_is_optional() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_optional(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CaptionDefProto)
  return target;
}

::size_t CaptionDefProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionDefProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 6;
  if (!this->_internal_text().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_text());
  }

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // uint32 stroke_color = 3;
  if (this->_internal_stroke_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_stroke_color());
  }

  // int32 offset_x = 4;
  if (this->_internal_offset_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_offset_x());
  }

  // int32 offset_y = 5;
  if (this->_internal_offset_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_offset_y());
  }

  // bool is_optional = 7;
  if (this->_internal_is_optional() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptionDefProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CaptionDefProto*>(
      &from));
}

void CaptionDefProto::MergeFrom(const CaptionDefProto& from) {
  CaptionDefProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CaptionDefProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_stroke_color() != 0) {
    _this->_internal_set_stroke_color(from._internal_stroke_color());
  }
  if (from._internal_offset_x() != 0) {
    _this->_internal_set_offset_x(from._internal_offset_x());
  }
  if (from._internal_offset_y() != 0) {
    _this->_internal_set_offset_y(from._internal_offset_y());
  }
  if (from._internal_is_optional() != 0) {
    _this->_internal_set_is_optional(from._internal_is_optional());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptionDefProto::CopyFrom(const CaptionDefProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionDefProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionDefProto::IsInitialized() const {
  return true;
}

void CaptionDefProto::InternalSwap(CaptionDefProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.text_, lhs_arena,
                                       &other->_impl_.text_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.is_optional_)
      + sizeof(CaptionDefProto::_impl_.is_optional_)
      - PROTOBUF_FIELD_OFFSET(CaptionDefProto, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

std::string CaptionDefProto::GetTypeName() const {
  return "CaptionDefProto";
}

// ===================================================================

class CaptionRuleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CaptionRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_._has_bits_);
  static const ::CaptionDefProto& primary(const CaptionRuleProto* msg);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CaptionDefProto& secondary(const CaptionRuleProto* msg);
  static void set_has_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CaptionDefProto&
CaptionRuleProto::_Internal::primary(const CaptionRuleProto* msg) {
  return *msg->_impl_.primary_;
}
const ::CaptionDefProto&
CaptionRuleProto::_Internal::secondary(const CaptionRuleProto* msg) {
  return *msg->_impl_.secondary_;
}
CaptionRuleProto::CaptionRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CaptionRuleProto)
}
CaptionRuleProto::CaptionRuleProto(const CaptionRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CaptionRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){nullptr}
    , decltype(_impl_.secondary_){nullptr}
    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.primary_ = new ::CaptionDefProto(*from._impl_.primary_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.secondary_ = new ::CaptionDefProto(*from._impl_.secondary_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:CaptionRuleProto)
}

inline void CaptionRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){nullptr}
    , decltype(_impl_.secondary_){nullptr}
    , decltype(_impl_.priority_) { 0 }

  };
}

CaptionRuleProto::~CaptionRuleProto() {
  // @@protoc_insertion_point(destructor:CaptionRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptionRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.primary_;
  if (this != internal_default_instance()) delete _impl_.secondary_;
}

void CaptionRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptionRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CaptionRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.primary_ != nullptr);
      _impl_.primary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.secondary_ != nullptr);
      _impl_.secondary_->Clear();
    }
  }
  _impl_.priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CaptionRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CaptionDefProto primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .CaptionDefProto secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CaptionRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CaptionRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .CaptionDefProto primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::primary(this),
        _Internal::primary(this).GetCachedSize(), target, stream);
  }

  // .CaptionDefProto secondary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::secondary(this),
        _Internal::secondary(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CaptionRuleProto)
  return target;
}

::size_t CaptionRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CaptionRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .CaptionDefProto primary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primary_);
    }

    // .CaptionDefProto secondary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.secondary_);
    }

  }
  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CaptionRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CaptionRuleProto*>(
      &from));
}

void CaptionRuleProto::MergeFrom(const CaptionRuleProto& from) {
  CaptionRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CaptionRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_primary()->::CaptionDefProto::MergeFrom(
          from._internal_primary());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_secondary()->::CaptionDefProto::MergeFrom(
          from._internal_secondary());
    }
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CaptionRuleProto::CopyFrom(const CaptionRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CaptionRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptionRuleProto::IsInitialized() const {
  return true;
}

void CaptionRuleProto::InternalSwap(CaptionRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.priority_)
      + sizeof(CaptionRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CaptionRuleProto, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

std::string CaptionRuleProto::GetTypeName() const {
  return "CaptionRuleProto";
}

// ===================================================================

class CircleRuleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CircleRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_._has_bits_);
  static const ::LineDefProto& border(const CircleRuleProto* msg);
  static void set_has_border(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::LineDefProto&
CircleRuleProto::_Internal::border(const CircleRuleProto* msg) {
  return *msg->_impl_.border_;
}
CircleRuleProto::CircleRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CircleRuleProto)
}
CircleRuleProto::CircleRuleProto(const CircleRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CircleRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.border_){nullptr}
    , decltype(_impl_.radius_) {}

    , decltype(_impl_.color_) {}

    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.border_ = new ::LineDefProto(*from._impl_.border_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:CircleRuleProto)
}

inline void CircleRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.border_){nullptr}
    , decltype(_impl_.radius_) { 0 }

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.priority_) { 0 }

  };
}

CircleRuleProto::~CircleRuleProto() {
  // @@protoc_insertion_point(destructor:CircleRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CircleRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.border_;
}

void CircleRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CircleRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:CircleRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.border_ != nullptr);
    _impl_.border_->Clear();
  }
  ::memset(&_impl_.radius_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CircleRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .LineDefProto border = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_border(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CircleRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CircleRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_radius = this->_internal_radius();
  ::uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_radius(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .LineDefProto border = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::border(this),
        _Internal::border(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CircleRuleProto)
  return target;
}

::size_t CircleRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CircleRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .LineDefProto border = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.border_);
  }

  // double radius = 1;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_radius = this->_internal_radius();
  ::uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    total_size += 9;
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CircleRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CircleRuleProto*>(
      &from));
}

void CircleRuleProto::MergeFrom(const CircleRuleProto& from) {
  CircleRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:CircleRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_border()->::LineDefProto::MergeFrom(
        from._internal_border());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_radius = from._internal_radius();
  ::uint64_t raw_radius;
  memcpy(&raw_radius, &tmp_radius, sizeof(tmp_radius));
  if (raw_radius != 0) {
    _this->_internal_set_radius(from._internal_radius());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CircleRuleProto::CopyFrom(const CircleRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CircleRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CircleRuleProto::IsInitialized() const {
  return true;
}

void CircleRuleProto::InternalSwap(CircleRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.priority_)
      + sizeof(CircleRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(CircleRuleProto, _impl_.border_)>(
          reinterpret_cast<char*>(&_impl_.border_),
          reinterpret_cast<char*>(&other->_impl_.border_));
}

std::string CircleRuleProto::GetTypeName() const {
  return "CircleRuleProto";
}

// ===================================================================

class PathTextRuleProto::_Internal {
 public:
  using HasBits = decltype(std::declval<PathTextRuleProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_._has_bits_);
  static const ::CaptionDefProto& primary(const PathTextRuleProto* msg);
  static void set_has_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CaptionDefProto& secondary(const PathTextRuleProto* msg);
  static void set_has_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CaptionDefProto&
PathTextRuleProto::_Internal::primary(const PathTextRuleProto* msg) {
  return *msg->_impl_.primary_;
}
const ::CaptionDefProto&
PathTextRuleProto::_Internal::secondary(const PathTextRuleProto* msg) {
  return *msg->_impl_.secondary_;
}
PathTextRuleProto::PathTextRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:PathTextRuleProto)
}
PathTextRuleProto::PathTextRuleProto(const PathTextRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PathTextRuleProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){nullptr}
    , decltype(_impl_.secondary_){nullptr}
    , decltype(_impl_.priority_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.primary_ = new ::CaptionDefProto(*from._impl_.primary_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.secondary_ = new ::CaptionDefProto(*from._impl_.secondary_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:PathTextRuleProto)
}

inline void PathTextRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.primary_){nullptr}
    , decltype(_impl_.secondary_){nullptr}
    , decltype(_impl_.priority_) { 0 }

  };
}

PathTextRuleProto::~PathTextRuleProto() {
  // @@protoc_insertion_point(destructor:PathTextRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PathTextRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.primary_;
  if (this != internal_default_instance()) delete _impl_.secondary_;
}

void PathTextRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PathTextRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:PathTextRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.primary_ != nullptr);
      _impl_.primary_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.secondary_ != nullptr);
      _impl_.secondary_->Clear();
    }
  }
  _impl_.priority_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PathTextRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .CaptionDefProto primary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_primary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .CaptionDefProto secondary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PathTextRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PathTextRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .CaptionDefProto primary = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::primary(this),
        _Internal::primary(this).GetCachedSize(), target, stream);
  }

  // .CaptionDefProto secondary = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::secondary(this),
        _Internal::secondary(this).GetCachedSize(), target, stream);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PathTextRuleProto)
  return target;
}

::size_t PathTextRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PathTextRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .CaptionDefProto primary = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.primary_);
    }

    // .CaptionDefProto secondary = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.secondary_);
    }

  }
  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathTextRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PathTextRuleProto*>(
      &from));
}

void PathTextRuleProto::MergeFrom(const PathTextRuleProto& from) {
  PathTextRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:PathTextRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_primary()->::CaptionDefProto::MergeFrom(
          from._internal_primary());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_secondary()->::CaptionDefProto::MergeFrom(
          from._internal_secondary());
    }
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PathTextRuleProto::CopyFrom(const PathTextRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PathTextRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTextRuleProto::IsInitialized() const {
  return true;
}

void PathTextRuleProto::InternalSwap(PathTextRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.priority_)
      + sizeof(PathTextRuleProto::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(PathTextRuleProto, _impl_.primary_)>(
          reinterpret_cast<char*>(&_impl_.primary_),
          reinterpret_cast<char*>(&other->_impl_.primary_));
}

std::string PathTextRuleProto::GetTypeName() const {
  return "PathTextRuleProto";
}

// ===================================================================

class ShieldRuleProto::_Internal {
 public:
};

ShieldRuleProto::ShieldRuleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ShieldRuleProto)
}
ShieldRuleProto::ShieldRuleProto(const ShieldRuleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ShieldRuleProto)
}

inline void ShieldRuleProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.height_) { 0 }

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.stroke_color_) { 0u }

    , decltype(_impl_.priority_) { 0 }

    , decltype(_impl_.min_distance_) { 0 }

    , decltype(_impl_.text_color_) { 0u }

    , decltype(_impl_.text_stroke_color_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShieldRuleProto::~ShieldRuleProto() {
  // @@protoc_insertion_point(destructor:ShieldRuleProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShieldRuleProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShieldRuleProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShieldRuleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ShieldRuleProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.text_stroke_color_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.text_stroke_color_));
  _internal_metadata_.Clear<std::string>();
}

const char* ShieldRuleProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 stroke_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.stroke_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 priority = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 min_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 text_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.text_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 text_stroke_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.text_stroke_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShieldRuleProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShieldRuleProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  // uint32 stroke_color = 3;
  if (this->_internal_stroke_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_stroke_color(), target);
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_priority(), target);
  }

  // int32 min_distance = 5;
  if (this->_internal_min_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_min_distance(), target);
  }

  // uint32 text_color = 6;
  if (this->_internal_text_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_text_color(), target);
  }

  // uint32 text_stroke_color = 7;
  if (this->_internal_text_stroke_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_text_stroke_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShieldRuleProto)
  return target;
}

::size_t ShieldRuleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ShieldRuleProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_height());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // uint32 stroke_color = 3;
  if (this->_internal_stroke_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_stroke_color());
  }

  // int32 priority = 4;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_priority());
  }

  // int32 min_distance = 5;
  if (this->_internal_min_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_min_distance());
  }

  // uint32 text_color = 6;
  if (this->_internal_text_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_text_color());
  }

  // uint32 text_stroke_color = 7;
  if (this->_internal_text_stroke_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_text_stroke_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShieldRuleProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShieldRuleProto*>(
      &from));
}

void ShieldRuleProto::MergeFrom(const ShieldRuleProto& from) {
  ShieldRuleProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ShieldRuleProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_stroke_color() != 0) {
    _this->_internal_set_stroke_color(from._internal_stroke_color());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_min_distance() != 0) {
    _this->_internal_set_min_distance(from._internal_min_distance());
  }
  if (from._internal_text_color() != 0) {
    _this->_internal_set_text_color(from._internal_text_color());
  }
  if (from._internal_text_stroke_color() != 0) {
    _this->_internal_set_text_stroke_color(from._internal_text_stroke_color());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShieldRuleProto::CopyFrom(const ShieldRuleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ShieldRuleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldRuleProto::IsInitialized() const {
  return true;
}

void ShieldRuleProto::InternalSwap(ShieldRuleProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.text_stroke_color_)
      + sizeof(ShieldRuleProto::_impl_.text_stroke_color_)
      - PROTOBUF_FIELD_OFFSET(ShieldRuleProto, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

std::string ShieldRuleProto::GetTypeName() const {
  return "ShieldRuleProto";
}

// ===================================================================

class DrawElementProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawElementProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_._has_bits_);
  static const ::AreaRuleProto& area(const DrawElementProto* msg);
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SymbolRuleProto& symbol(const DrawElementProto* msg);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CaptionRuleProto& caption(const DrawElementProto* msg);
  static void set_has_caption(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CircleRuleProto& circle(const DrawElementProto* msg);
  static void set_has_circle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::PathTextRuleProto& path_text(const DrawElementProto* msg);
  static void set_has_path_text(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ShieldRuleProto& shield(const DrawElementProto* msg);
  static void set_has_shield(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::AreaRuleProto&
DrawElementProto::_Internal::area(const DrawElementProto* msg) {
  return *msg->_impl_.area_;
}
const ::SymbolRuleProto&
DrawElementProto::_Internal::symbol(const DrawElementProto* msg) {
  return *msg->_impl_.symbol_;
}
const ::CaptionRuleProto&
DrawElementProto::_Internal::caption(const DrawElementProto* msg) {
  return *msg->_impl_.caption_;
}
const ::CircleRuleProto&
DrawElementProto::_Internal::circle(const DrawElementProto* msg) {
  return *msg->_impl_.circle_;
}
const ::PathTextRuleProto&
DrawElementProto::_Internal::path_text(const DrawElementProto* msg) {
  return *msg->_impl_.path_text_;
}
const ::ShieldRuleProto&
DrawElementProto::_Internal::shield(const DrawElementProto* msg) {
  return *msg->_impl_.shield_;
}
DrawElementProto::DrawElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:DrawElementProto)
}
DrawElementProto::DrawElementProto(const DrawElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DrawElementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.apply_if_){from._impl_.apply_if_}
    , decltype(_impl_.area_){nullptr}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.caption_){nullptr}
    , decltype(_impl_.circle_){nullptr}
    , decltype(_impl_.path_text_){nullptr}
    , decltype(_impl_.shield_){nullptr}
    , decltype(_impl_.scale_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.area_ = new ::AreaRuleProto(*from._impl_.area_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.symbol_ = new ::SymbolRuleProto(*from._impl_.symbol_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.caption_ = new ::CaptionRuleProto(*from._impl_.caption_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.circle_ = new ::CircleRuleProto(*from._impl_.circle_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.path_text_ = new ::PathTextRuleProto(*from._impl_.path_text_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.shield_ = new ::ShieldRuleProto(*from._impl_.shield_);
  }
  _this->_impl_.scale_ = from._impl_.scale_;
  // @@protoc_insertion_point(copy_constructor:DrawElementProto)
}

inline void DrawElementProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lines_){arena}
    , decltype(_impl_.apply_if_){arena}
    , decltype(_impl_.area_){nullptr}
    , decltype(_impl_.symbol_){nullptr}
    , decltype(_impl_.caption_){nullptr}
    , decltype(_impl_.circle_){nullptr}
    , decltype(_impl_.path_text_){nullptr}
    , decltype(_impl_.shield_){nullptr}
    , decltype(_impl_.scale_) { 0 }

  };
}

DrawElementProto::~DrawElementProto() {
  // @@protoc_insertion_point(destructor:DrawElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DrawElementProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_lines()->~RepeatedPtrField();
  _internal_mutable_apply_if()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.area_;
  if (this != internal_default_instance()) delete _impl_.symbol_;
  if (this != internal_default_instance()) delete _impl_.caption_;
  if (this != internal_default_instance()) delete _impl_.circle_;
  if (this != internal_default_instance()) delete _impl_.path_text_;
  if (this != internal_default_instance()) delete _impl_.shield_;
}

void DrawElementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DrawElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DrawElementProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_lines()->Clear();
  _internal_mutable_apply_if()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.area_ != nullptr);
      _impl_.area_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.symbol_ != nullptr);
      _impl_.symbol_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.caption_ != nullptr);
      _impl_.caption_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.circle_ != nullptr);
      _impl_.circle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.path_text_ != nullptr);
      _impl_.path_text_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.shield_ != nullptr);
      _impl_.shield_->Clear();
    }
  }
  _impl_.scale_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DrawElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 scale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .LineRuleProto lines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .AreaRuleProto area = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_area(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .SymbolRuleProto symbol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_symbol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .CaptionRuleProto caption = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_caption(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .CircleRuleProto circle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_circle(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .PathTextRuleProto path_text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_text(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ShieldRuleProto shield = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_shield(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string apply_if = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_apply_if();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DrawElementProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrawElementProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 scale = 1;
  if (this->_internal_scale() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_scale(), target);
  }

  // repeated .LineRuleProto lines = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .AreaRuleProto area = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::area(this),
        _Internal::area(this).GetCachedSize(), target, stream);
  }

  // .SymbolRuleProto symbol = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::symbol(this),
        _Internal::symbol(this).GetCachedSize(), target, stream);
  }

  // .CaptionRuleProto caption = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::caption(this),
        _Internal::caption(this).GetCachedSize(), target, stream);
  }

  // .CircleRuleProto circle = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::circle(this),
        _Internal::circle(this).GetCachedSize(), target, stream);
  }

  // .PathTextRuleProto path_text = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::path_text(this),
        _Internal::path_text(this).GetCachedSize(), target, stream);
  }

  // .ShieldRuleProto shield = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::shield(this),
        _Internal::shield(this).GetCachedSize(), target, stream);
  }

  // repeated string apply_if = 9;
  for (int i = 0, n = this->_internal_apply_if_size(); i < n; ++i) {
    const auto& s = this->_internal_apply_if(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "DrawElementProto.apply_if");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrawElementProto)
  return target;
}

::size_t DrawElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrawElementProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LineRuleProto lines = 2;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_internal_lines()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string apply_if = 9;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_apply_if().size());
  for (int i = 0, n = _internal_apply_if().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_apply_if().Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .AreaRuleProto area = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.area_);
    }

    // .SymbolRuleProto symbol = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.symbol_);
    }

    // .CaptionRuleProto caption = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.caption_);
    }

    // .CircleRuleProto circle = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.circle_);
    }

    // .PathTextRuleProto path_text = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.path_text_);
    }

    // .ShieldRuleProto shield = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shield_);
    }

  }
  // int32 scale = 1;
  if (this->_internal_scale() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_scale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DrawElementProto*>(
      &from));
}

void DrawElementProto::MergeFrom(const DrawElementProto& from) {
  DrawElementProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:DrawElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_lines()->MergeFrom(from._internal_lines());
  _this->_internal_mutable_apply_if()->MergeFrom(from._internal_apply_if());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_area()->::AreaRuleProto::MergeFrom(
          from._internal_area());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_symbol()->::SymbolRuleProto::MergeFrom(
          from._internal_symbol());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_caption()->::CaptionRuleProto::MergeFrom(
          from._internal_caption());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_circle()->::CircleRuleProto::MergeFrom(
          from._internal_circle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_path_text()->::PathTextRuleProto::MergeFrom(
          from._internal_path_text());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_shield()->::ShieldRuleProto::MergeFrom(
          from._internal_shield());
    }
  }
  if (from._internal_scale() != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DrawElementProto::CopyFrom(const DrawElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrawElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawElementProto::IsInitialized() const {
  return true;
}

void DrawElementProto::InternalSwap(DrawElementProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_lines()->InternalSwap(other->_internal_mutable_lines());
  _internal_mutable_apply_if()->InternalSwap(
      other->_internal_mutable_apply_if());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.scale_)
      + sizeof(DrawElementProto::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(DrawElementProto, _impl_.area_)>(
          reinterpret_cast<char*>(&_impl_.area_),
          reinterpret_cast<char*>(&other->_impl_.area_));
}

std::string DrawElementProto::GetTypeName() const {
  return "DrawElementProto";
}

// ===================================================================

class ClassifElementProto::_Internal {
 public:
};

ClassifElementProto::ClassifElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ClassifElementProto)
}
ClassifElementProto::ClassifElementProto(const ClassifElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ClassifElementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.element_){from._impl_.element_}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ClassifElementProto)
}

inline void ClassifElementProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.element_){arena}
    , decltype(_impl_.name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassifElementProto::~ClassifElementProto() {
  // @@protoc_insertion_point(destructor:ClassifElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassifElementProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_element()->~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void ClassifElementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClassifElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ClassifElementProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_element()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ClassifElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .DrawElementProto element = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClassifElementProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassifElementProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ClassifElementProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .DrawElementProto element = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassifElementProto)
  return target;
}

::size_t ClassifElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClassifElementProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DrawElementProto element = 2;
  total_size += 1UL * this->_internal_element_size();
  for (const auto& msg : this->_internal_element()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClassifElementProto*>(
      &from));
}

void ClassifElementProto::MergeFrom(const ClassifElementProto& from) {
  ClassifElementProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ClassifElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_element()->MergeFrom(from._internal_element());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClassifElementProto::CopyFrom(const ClassifElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClassifElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifElementProto::IsInitialized() const {
  return true;
}

void ClassifElementProto::InternalSwap(ClassifElementProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_element()->InternalSwap(other->_internal_mutable_element());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

std::string ClassifElementProto::GetTypeName() const {
  return "ClassifElementProto";
}

// ===================================================================

class ColorElementProto::_Internal {
 public:
};

ColorElementProto::ColorElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ColorElementProto)
}
ColorElementProto::ColorElementProto(const ColorElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ColorElementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.color_) {}

    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:ColorElementProto)
}

inline void ColorElementProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.name_) {}

    , decltype(_impl_.color_) { 0u }

    , decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColorElementProto::~ColorElementProto() {
  // @@protoc_insertion_point(destructor:ColorElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorElementProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ColorElementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColorElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorElementProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.color_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<std::string>();
}

const char* ColorElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ColorElementProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColorElementProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ColorElementProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_color(), target);
  }

  // float x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_x(), target);
  }

  // float y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColorElementProto)
  return target;
}

::size_t ColorElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorElementProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // uint32 color = 2;
  if (this->_internal_color() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_color());
  }

  // float x = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ColorElementProto*>(
      &from));
}

void ColorElementProto::MergeFrom(const ColorElementProto& from) {
  ColorElementProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ColorElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorElementProto::CopyFrom(const ColorElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorElementProto::IsInitialized() const {
  return true;
}

void ColorElementProto::InternalSwap(ColorElementProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.y_)
      + sizeof(ColorElementProto::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ColorElementProto, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

std::string ColorElementProto::GetTypeName() const {
  return "ColorElementProto";
}

// ===================================================================

class ColorsElementProto::_Internal {
 public:
};

ColorsElementProto::ColorsElementProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ColorsElementProto)
}
ColorsElementProto::ColorsElementProto(const ColorsElementProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ColorsElementProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ColorsElementProto)
}

inline void ColorsElementProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ColorsElementProto::~ColorsElementProto() {
  // @@protoc_insertion_point(destructor:ColorsElementProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorsElementProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_value()->~RepeatedPtrField();
}

void ColorsElementProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColorsElementProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ColorsElementProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_value()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ColorsElementProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ColorElementProto value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ColorsElementProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ColorsElementProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ColorElementProto value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ColorsElementProto)
  return target;
}

::size_t ColorsElementProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ColorsElementProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ColorElementProto value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_internal_value()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorsElementProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ColorsElementProto*>(
      &from));
}

void ColorsElementProto::MergeFrom(const ColorsElementProto& from) {
  ColorsElementProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ColorsElementProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_value()->MergeFrom(from._internal_value());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ColorsElementProto::CopyFrom(const ColorsElementProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ColorsElementProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorsElementProto::IsInitialized() const {
  return true;
}

void ColorsElementProto::InternalSwap(ColorsElementProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_value()->InternalSwap(other->_internal_mutable_value());
}

std::string ColorsElementProto::GetTypeName() const {
  return "ColorsElementProto";
}

// ===================================================================

class ContainerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ContainerProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ContainerProto, _impl_._has_bits_);
  static const ::ColorsElementProto& colors(const ContainerProto* msg);
  static void set_has_colors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ColorsElementProto&
ContainerProto::_Internal::colors(const ContainerProto* msg) {
  return *msg->_impl_.colors_;
}
ContainerProto::ContainerProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ContainerProto)
}
ContainerProto::ContainerProto(const ContainerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ContainerProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cont_){from._impl_.cont_}
    , decltype(_impl_.colors_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.colors_ = new ::ColorsElementProto(*from._impl_.colors_);
  }
  // @@protoc_insertion_point(copy_constructor:ContainerProto)
}

inline void ContainerProto::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cont_){arena}
    , decltype(_impl_.colors_){nullptr}
  };
}

ContainerProto::~ContainerProto() {
  // @@protoc_insertion_point(destructor:ContainerProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContainerProto::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cont()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.colors_;
}

void ContainerProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContainerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:ContainerProto)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cont()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.colors_ != nullptr);
    _impl_.colors_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ContainerProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ClassifElementProto cont = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cont(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ColorsElementProto colors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_colors(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContainerProto::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContainerProto)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ClassifElementProto cont = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cont_size()); i < n; i++) {
    const auto& repfield = this->_internal_cont(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ColorsElementProto colors = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::colors(this),
        _Internal::colors(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContainerProto)
  return target;
}

::size_t ContainerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ContainerProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ClassifElementProto cont = 1;
  total_size += 1UL * this->_internal_cont_size();
  for (const auto& msg : this->_internal_cont()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ColorsElementProto colors = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.colors_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContainerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContainerProto*>(
      &from));
}

void ContainerProto::MergeFrom(const ContainerProto& from) {
  ContainerProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:ContainerProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cont()->MergeFrom(from._internal_cont());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_colors()->::ColorsElementProto::MergeFrom(
        from._internal_colors());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContainerProto::CopyFrom(const ContainerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ContainerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerProto::IsInitialized() const {
  return true;
}

void ContainerProto::InternalSwap(ContainerProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_cont()->InternalSwap(other->_internal_mutable_cont());
  swap(_impl_.colors_, other->_impl_.colors_);
}

std::string ContainerProto::GetTypeName() const {
  return "ContainerProto";
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DashDotProto*
Arena::CreateMaybeMessage< ::DashDotProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DashDotProto >(arena);
}
template<> PROTOBUF_NOINLINE ::PathSymProto*
Arena::CreateMaybeMessage< ::PathSymProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PathSymProto >(arena);
}
template<> PROTOBUF_NOINLINE ::LineRuleProto*
Arena::CreateMaybeMessage< ::LineRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LineRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::LineDefProto*
Arena::CreateMaybeMessage< ::LineDefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::LineDefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::AreaRuleProto*
Arena::CreateMaybeMessage< ::AreaRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AreaRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::SymbolRuleProto*
Arena::CreateMaybeMessage< ::SymbolRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SymbolRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CaptionDefProto*
Arena::CreateMaybeMessage< ::CaptionDefProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CaptionDefProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CaptionRuleProto*
Arena::CreateMaybeMessage< ::CaptionRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CaptionRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::CircleRuleProto*
Arena::CreateMaybeMessage< ::CircleRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CircleRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::PathTextRuleProto*
Arena::CreateMaybeMessage< ::PathTextRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PathTextRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ShieldRuleProto*
Arena::CreateMaybeMessage< ::ShieldRuleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ShieldRuleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DrawElementProto*
Arena::CreateMaybeMessage< ::DrawElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DrawElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ClassifElementProto*
Arena::CreateMaybeMessage< ::ClassifElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ClassifElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ColorElementProto*
Arena::CreateMaybeMessage< ::ColorElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ColorElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ColorsElementProto*
Arena::CreateMaybeMessage< ::ColorsElementProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ColorsElementProto >(arena);
}
template<> PROTOBUF_NOINLINE ::ContainerProto*
Arena::CreateMaybeMessage< ::ContainerProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ContainerProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
